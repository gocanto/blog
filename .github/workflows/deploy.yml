# --- .github/workflows/deploy.yml
#     This GitHub Actions workflow automates the deployment of the Go application.
#     It builds the application, then securely deploys the binary to a remote VPS.

name: VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-push:
    strategy:
      matrix:
        os: [ubuntu-24.04]

    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker with Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env File
        run: echo "${{ secrets.ENV_FILE_CONTENT }}" > .env
        shell: bash

      - name: Build with Makefile
        run: make build:prod

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Release Artifacts
        run: make build:release BUILD_VERSION=${{ steps.set-tag.outputs.IMAGE_TAG }}

  deploy-to-vps:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-20.04

    steps:
      - name: SSH and Pull Images on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -e
            IMAGE_TAG=${{ needs.build-and-push.outputs.IMAGE_TAG }}

            echo "ðŸ”‘ Logging into GitHub Container Registry ..."
            echo ${{ secrets.GH_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "ðŸšš Pulling latest images with tag: $IMAGE_TAG"
            docker pull ghcr.io/gocanto/oullin_api:$IMAGE_TAG
            docker pull ghcr.io/gocanto/oullin_proxy:$IMAGE_TAG

            echo "ðŸ§¹ Pruning old, unused Docker images ..."
            docker image prune -af

            echo "âœ… Latest images pulled successfully to VPS!"
