# Filename: caddy/Caddyfile.prod
# Caddy will automatically provision a Let's Encrypt certificate.

oullin.io {
	# Enable compression to reduce bandwidth usage.
	encode gzip zstd

	# Add security-related headers to protect against common attacks.
	header {
		# Enable HSTS to ensure browsers only connect via HTTPS.
		Strict-Transport-Security "max-age=31536000;"
		# Prevent clickjacking attacks.
		X-Frame-Options "SAMEORIGIN"
		# Prevent content type sniffing.
		X-Content-Type-Options "nosniff"
		# Enhances user privacy.
		Referrer-Policy "strict-origin-when-cross-origin"
	}

	log {
		output file /var/log/caddy/oullin.io.log {
			roll_size 10mb # Rotate logs after they reach 10MB
			roll_keep 5 # Keep the last 5 rotated log files
		}

		format json
	}

	# Route API traffic to the Go backend.
	# Reverse-proxy all requests to the Go API, forwarding Host + auth headers
	handle_path /api/* {
		reverse_proxy {
			# Tell Caddy which upstream to send to
			to api:8080

			# Preserve the original Host header
			header_up Host {host}

			# Forward the client-sent auth headers
			header_up X-API-Username {http.request.header.X-API-Username}
			header_up X-API-Key {http.request.header.X-API-Key}
			header_up X-API-Signature {http.request.header.X-API-Signature}

			# *** DEBUG: echo back to client what Caddy actually saw ***
			# header_down X-Debug-Username {http.request.header.X-API-Username}
			# header_down X-Debug-Key {http.request.header.X-API-Key}
			# header_down X-Debug-Signature {http.request.header.X-API-Signature}

			# Transport timeouts
			transport http {
				dial_timeout 10s
				response_header_timeout 30s
			}
		}
	}
}
